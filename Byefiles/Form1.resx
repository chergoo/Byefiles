<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANKt
        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
        NOmTfzTpk3806ZN/NOmTfzTpk380LgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////////////////////////
        ////////4H98B+A+fAfgHnwH5558/+eefP/nnnz/4B48B+A+PAfgPBwH55yc/+eYnP/nGcz/4DHMB+Bz
        5Af///////////////////////////////8=
</value>
  </data>
</root>